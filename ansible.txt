1. inventory.ini -> El inventario es la lista de máquinas (hosts) que Ansible puede gestionar. 
En nuestro caso tenemos solo el localhost, pero en un escenario real pondría direcciones IP o FQDN de varios servidores.

CODIGO EJEMPLO:
[local]
localhost ansible_connection=local

[local] → es un grupo de hosts (puede usarse el nombre que quiera).

localhost → es el nombre del host, aquí representa tu máquina local.

ansible_connection=local → le indica a Ansible que no intente conectarse por SSH, sino que ejecute directamente en tu máquina.


2. Función del playbook.yml

El playbook es como un guion de automatización. Define qué hacer, dónde y con qué privilegios.

CODIGO EJEMPLO: 
---
- name: Desplegar Nginx en localhost
  hosts: local
  become: true
  roles:
    - nginx

Explicación línea a línea:

--- → indica inicio de documento YAML.
- name: →  describe lo que hará el playbook.
hosts: local → establece en que grupo deben ejecutarse las tareas del inventario.
become: true → le dice a Ansible que use privilegios de superusuario.
roles: - nginx → en vez de escribir todas las tareas aquí, delega la ejecución al rol nginx (que contiene las tareas organizadas).

En resumen: este playbook llama al rol encargado de instalar y configurar Nginx.

3. Flujo de trabajo

Ejecutamos: ansible-playbook -i inventory.ini playbook.yml

→ Ansible lee el inventario y sabe que debe actuar sobre localhost.

playbook.yml dice que debe aplicar el rol nginx.

Dentro del rol:

Va a roles/nginx/tasks/main.yml
Encuentra la tarea "Instalar Nginx", la ejecuta.
Encuentra la tarea "Copiar index.html", la ejecuta usando el módulo template.
El módulo template toma el archivo index.html.j2 de templates/
Lo renderiza (si hubiera variables)
Y lo copia en /var/www/html/index.html
Esa segunda tarea tiene notify: Reiniciar Nginx → eso dispara un handler.

4. Qué hace el handlers/main.yml

Los handlers son tareas especiales que solo se ejecutan si fueron notificadas.
Ejemplo nuestro:

CODIGO EJEMPLO:
- name: Reiniciar Nginx
  service:
    name: nginx
    state: restarted

Esto significa:

Si en alguna tarea pones notify: Reiniciar Nginx, al final de la ejecución, Ansible ejecuta este handler.

Sirven para evitar reinicios innecesarios: solo se ejecutan si algo cambió (por ejemplo, si el index.html fue actualizado).

5. Qué son los roles en Ansible

Los roles son una manera de organizar y reutilizar código.
Un rol encapsula:

tasks/ → las tareas principales.

handlers/ → las acciones que se disparan bajo notificación.

templates/ → archivos .j2 que se renderizan dinámicamente.

files/ → archivos estáticos que se copian.

vars/ y defaults/ → variables.

Función:

Facilitan la reutilización: puedes usar el mismo rol en distintos playbooks.

Mantienen ordenada la estructura.

Permiten compartir roles (ejemplo: en Ansible Galaxy).

En otras palabras: los roles son como módulos reutilizables de automatización.

6. Diferencia entre los dos comandos

Cuando ejecutaste: ansible-playbook -i inventory.ini playbook.yml
→ Falló porque la tarea de instalar paquetes (apt) y reiniciar servicios (service) requieren permisos de superusuario (sudo).
Como Ansible no tenía tu contraseña de sudo, no pudo continuar.

Cuando ejecutaste: ansible-playbook -i inventory.ini playbook.yml --ask-become-pass

Aquí le diste la bandera --ask-become-pass, que le dice a Ansible:
“pregunta al usuario la contraseña sudo para ejecutar como root”.

Entonces Ansible te pidió la contraseña de tu usuario para elevar privilegios, y ya pudo instalar Nginx.

En conclusión:

El inventario define sobre qué hosts trabajas.

El playbook define qué hacer en esos hosts.

El flujo de ejecución va: playbook → rol → tareas → templates/handlers.

Los handlers se ejecutan solo si fueron notificados.

Los roles organizan tu código y lo hacen reutilizable.

El --ask-become-pass fue necesario porque estabas ejecutando en localhost con sudo, y sin esa opción Ansible no sabía tu contraseña para elevar privilegios.
